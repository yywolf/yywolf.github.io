<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>自娱自乐</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-08-24T14:42:33.875Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>yangyun</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>可变与不可变对象修饰问题</title>
    <link href="http://yoursite.com/2018/08/24/%E5%8F%AF%E5%8F%98%E4%B8%8E%E4%B8%8D%E5%8F%AF%E5%8F%98%E5%AF%B9%E8%B1%A1%E4%BF%AE%E9%A5%B0%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2018/08/24/可变与不可变对象修饰问题/</id>
    <published>2018-08-24T14:33:56.000Z</published>
    <updated>2018-08-24T14:42:33.875Z</updated>
    
    <content type="html"><![CDATA[<h3 id="不可变对象"><a href="#不可变对象" class="headerlink" title="不可变对象"></a>不可变对象</h3><h4 id="使用copy修饰不可变对象nameCopy，"><a href="#使用copy修饰不可变对象nameCopy，" class="headerlink" title="使用copy修饰不可变对象nameCopy，"></a>使用copy修饰不可变对象nameCopy，</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@property (nonatomic, copy) NSString *nameCopy;</span><br></pre></td></tr></table></figure><p>如果传进来的是不可变对象tempStr，nameCopy拷贝tempStr的地址并持有，当在其他地方修改tempStr的值时，其自动创建一个新的地址并赋值，并不会影响nameCopy的值；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">NSString *tempStr = @&quot;111&quot;;</span><br><span class="line">NSLog(@&quot;tempStr 1 =%p&quot;,tempStr);</span><br><span class="line">//tempStr 1 = 0x10be59078</span><br><span class="line"></span><br><span class="line">self.nameCopy = tempStr;</span><br><span class="line">NSLog(@&quot;nameCopy 1 =%p&quot;,self.nameCopy);</span><br><span class="line">//nameCopy 1 = 0x10be59078</span><br><span class="line"></span><br><span class="line">tempStr = @&quot;222&quot;;</span><br><span class="line">NSLog(@&quot;tempStr 2 = %p&quot;,tempStr);</span><br><span class="line">//tempStr 2 = 0x10be590d8</span><br><span class="line"></span><br><span class="line">NSLog(@&quot;nameCopy= %@   nameCopy 2 = %p&quot;,self.nameCopy,self.nameCopy);</span><br><span class="line">// nameCopy = 111   nameCopy 2 = 0x10be59078</span><br></pre></td></tr></table></figure><p>如果传进来的是可变对象tempMulStr，nameCopy并不拷贝tempMulStr的地址，自己创建一个地址空间来存储传入的值，当修改tempMulStr时，而这地址不一样，也无法影响到nameCopy的值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">NSMutableString *tempMulStr = [NSMutableString stringWithFormat:@&quot;333&quot;];</span><br><span class="line">NSLog(@&quot;tempMulStr 1 = %p&quot;,tempMulStr);</span><br><span class="line">//tempMulStr 1 = 0x60000007d1c0</span><br><span class="line"></span><br><span class="line">self.nameCopy = tempMulStr;</span><br><span class="line">NSLog(@&quot;nameCopy 1 = %p&quot;,self.nameCopy);</span><br><span class="line">//nameCopy 1 = 0xa000000003333333</span><br><span class="line"></span><br><span class="line">[tempMulStr appendString:@&quot;444&quot;];</span><br><span class="line">NSLog(@&quot;tempMulStr 2 = %p&quot;,tempMulStr);</span><br><span class="line">//tempMulStr 2 = 0x60000007d1c0</span><br><span class="line"></span><br><span class="line">NSLog(@&quot;nameCopy= %@   nameCopy 2 = %p&quot;,self.nameCopy,self.nameCopy);</span><br><span class="line">//nameCopy=333   nameCopy 2 = 0xa000000003333333</span><br></pre></td></tr></table></figure><h4 id="使用strong修饰不可变对象"><a href="#使用strong修饰不可变对象" class="headerlink" title="使用strong修饰不可变对象"></a>使用strong修饰不可变对象</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@property (nonatomic, strong) NSString *nameStrong;</span><br></pre></td></tr></table></figure><p>如果传入的是不可变对象tempStr，nameStrong会拷贝他的地址空间并持有，再次修改tempStr，其会另外创建一个地址并赋值，并不会影响nameStrong的值；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">NSString *tempStr = @&quot;111&quot;;</span><br><span class="line">NSLog(@&quot;tempStr 1 = %p&quot;,tempStr);</span><br><span class="line">//tempStr 1 = 0x10b08b078</span><br><span class="line"></span><br><span class="line">self.nameStrong = tempStr;</span><br><span class="line">NSLog(@&quot;nameStrong 1 = %p&quot;,self.nameStrong);</span><br><span class="line">//nameStrong 1 = 0x10b08b078</span><br><span class="line"></span><br><span class="line">tempStr = @&quot;222&quot;;</span><br><span class="line">NSLog(@&quot;tempStr 2 = %p&quot;,tempStr);</span><br><span class="line">//tempStr 2 = 0x10b08b0d8</span><br><span class="line"></span><br><span class="line">NSLog(@&quot;nameStrong = %@   nameStrong 2 = %p&quot;,self.nameStrong,self.nameStrong);</span><br><span class="line">// nameStrong = 111   nameStrong 2 = 0x10b08b078</span><br></pre></td></tr></table></figure><p>如果传入的是可变对象tempMulStr，nameStrong会拷贝并一直持有tempMulStr的地址，在其他地方修改tempMulStr的值，nameStrong的值也一并会改变。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">NSMutableString *tempMulStr = [NSMutableString stringWithFormat:@&quot;333&quot;];</span><br><span class="line">NSLog(@&quot;tempMulStr 1 = %p&quot;,tempMulStr);</span><br><span class="line">//tempMulStr 1 = 0x600000078900</span><br><span class="line"></span><br><span class="line">self.nameStrong = tempMulStr;</span><br><span class="line">NSLog(@&quot;nameStrong 1 = %p&quot;,self.nameStrong);</span><br><span class="line">//nameStrong 1 = 0x600000078900</span><br><span class="line">[tempMulStr appendString:@&quot;444&quot;];</span><br><span class="line">NSLog(@&quot;tempMulStr 2 = %p&quot;,tempMulStr);</span><br><span class="line">//tempMulStr 2 = 0x600000078900</span><br><span class="line"></span><br><span class="line">NSLog(@&quot;nameStrong = %@   nameStrong 2 = %p&quot;,self.nameStrong,self.nameStrong);</span><br><span class="line">//nameStrong = 333444   nameStrong 2 = 0x600000078900</span><br></pre></td></tr></table></figure><p>这与我们的初衷(不可变对象)不符！</p><h3 id="可变对象"><a href="#可变对象" class="headerlink" title="可变对象"></a>可变对象</h3><h4 id="使用copy修饰可变对象nameMulCopy"><a href="#使用copy修饰可变对象nameMulCopy" class="headerlink" title="使用copy修饰可变对象nameMulCopy"></a>使用copy修饰可变对象nameMulCopy</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@property (nonatomic, copy) NSMutableString *nameMulCopy;</span><br></pre></td></tr></table></figure><p>使用copy修饰后，nameMulCopy就变成了不可变对象，但是我们声明的是可变对象，而且在使用可变对象的一些方法时，程序会crash。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">NSString *tempStr = @&quot;111&quot;;</span><br><span class="line">NSLog(@&quot;tempStr 1 = %p&quot;,tempStr);</span><br><span class="line">// tempStr 1 = 0x10ceae078</span><br><span class="line">//需要mutableCopy转化</span><br><span class="line">self.nameMulCopy = [tempStr mutableCopy];</span><br><span class="line">NSLog(@&quot;nameMulCopy 1 = %p  tempStr = %p&quot;,self.nameMulCopy,tempStr);</span><br><span class="line">//nameMulCopy 1 = 0xa000000003131313  tempStr = 0x10ceae078</span><br><span class="line"></span><br><span class="line">tempStr = @&quot;222&quot;;</span><br><span class="line">NSLog(@&quot;tempStr 2 = %p&quot;,tempStr);</span><br><span class="line">//tempStr 2 = 0x10ceae0d8</span><br><span class="line"></span><br><span class="line">//此行crash</span><br><span class="line">//[NSTaggedPointerString appendString:]: unrecognized selector sent to instance 0xa000000003131313   </span><br><span class="line">//未识别方法，因为copy后变成不可变对象了</span><br><span class="line">[self.nameMulCopy appendString:@&quot;333&quot;];</span><br><span class="line"></span><br><span class="line">NSLog(@&quot;nameMulCopy = %@   nameMulCopy 2 = %p&quot;,self.nameMulCopy,self.nameMulCopy);</span><br><span class="line">//nameMulCopy = 111   nameMulCopy 2 = 0xa000000003131313</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">NSMutableString *tempMulStr = [NSMutableString stringWithFormat:@&quot;333&quot;];</span><br><span class="line">NSLog(@&quot;tempMulStr 1 = %p&quot;,tempMulStr);</span><br><span class="line">//tempMulStr 1 = 0x600000076d80</span><br><span class="line"></span><br><span class="line">self.nameMulCopy = tempMulStr;</span><br><span class="line">NSLog(@&quot;nameMulCopy 1 = %p&quot;,self.nameMulCopy);</span><br><span class="line">//nameMulCopy 1 = 0xa000000003333333</span><br><span class="line"></span><br><span class="line">[tempMulStr appendString:@&quot;444&quot;];</span><br><span class="line">NSLog(@&quot;tempMulStr 2 = %p&quot;,tempMulStr);</span><br><span class="line">//tempMulStr 2 = 0x600000076d80</span><br><span class="line"></span><br><span class="line">NSLog(@&quot;nameMulCopy = %@   nameMulCopy 2 = %p&quot;,self.nameMulCopy,self.nameMulCopy);</span><br><span class="line">//nameMulCopy = 333   nameMulCopy 2 = 0xa000000003333333</span><br></pre></td></tr></table></figure><h4 id="使用strong修饰可变对象nameMulStrong"><a href="#使用strong修饰可变对象nameMulStrong" class="headerlink" title="使用strong修饰可变对象nameMulStrong"></a>使用strong修饰可变对象nameMulStrong</h4><p>如果传入的是不可变对象(需要mutableCopy转化)，nameMulStrong保存值到自己的地址，之后与tempStr在无关联。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">NSString *tempStr = @&quot;111&quot;;</span><br><span class="line">NSLog(@&quot;tempStr 1 = %p&quot;,tempStr);</span><br><span class="line">//tempStr 1 = 0x10e89a078</span><br><span class="line"></span><br><span class="line">self.nameMulStrong = [tempStr mutableCopy];</span><br><span class="line">NSLog(@&quot;nameMulStrong 1 = %p  tempStr = %p&quot;,self.nameMulStrong,tempStr);</span><br><span class="line">//nameMulStrong 1 = 0x6000000723c0  tempStr = 0x10e89a078</span><br><span class="line"></span><br><span class="line">tempStr = @&quot;222&quot;;</span><br><span class="line">NSLog(@&quot;tempStr 2 = %p&quot;,tempStr);</span><br><span class="line">// tempStr 2 = 0x10e89a0d8</span><br><span class="line">    </span><br><span class="line">NSLog(@&quot;nameMulStrong = %@   nameMulStrong 2 = %p&quot;,self.nameMulStrong,self.nameMulStrong);</span><br><span class="line">//nameMulStrong = 111   nameMulStrong 2 = 0x6000000723c0</span><br></pre></td></tr></table></figure><p>如果传入的是可变对象，nameMulStrong会拷贝并一直持有传入对象的地址空间，当传入的对象值发生变化时，nameMulStrong也会发生变化。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">NSMutableString *tempMulStr = [NSMutableString stringWithFormat:@&quot;333&quot;];</span><br><span class="line">NSLog(@&quot;tempMulStr 1 = %p&quot;,tempMulStr);</span><br><span class="line">//tempMulStr 1 = 0x6080000730c0</span><br><span class="line"></span><br><span class="line">self.nameMulStrong = tempMulStr;</span><br><span class="line">NSLog(@&quot;nameMulStrong 1 = %p&quot;,self.nameMulStrong);</span><br><span class="line">// nameMulStrong 1 = 0x6080000730c0</span><br><span class="line"></span><br><span class="line">[tempMulStr appendString:@&quot;444&quot;];</span><br><span class="line">NSLog(@&quot;tempMulStr 2 = %p&quot;,tempMulStr);</span><br><span class="line">// tempMulStr 2 = 0x6080000730c0</span><br><span class="line"></span><br><span class="line">NSLog(@&quot;nameMulStrong = %@   nameMulStrong 2 = %p&quot;,self.nameMulStrong,self.nameMulStrong);</span><br><span class="line">// nameMulStrong = 333444   nameMulStrong 2 = 0x6080000730c0</span><br></pre></td></tr></table></figure><p>其他的可变与不可变对象与此同理。</p><h3 id="结论"><a href="#结论" class="headerlink" title="结论:"></a>结论:</h3><pre><code>不可变对象应当用copy修饰；可变对象应当用strong修饰。</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;不可变对象&quot;&gt;&lt;a href=&quot;#不可变对象&quot; class=&quot;headerlink&quot; title=&quot;不可变对象&quot;&gt;&lt;/a&gt;不可变对象&lt;/h3&gt;&lt;h4 id=&quot;使用copy修饰不可变对象nameCopy，&quot;&gt;&lt;a href=&quot;#使用copy修饰不可变对象nameCo
      
    
    </summary>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>利用Hexo+Github搭建个人博客</title>
    <link href="http://yoursite.com/2018/08/23/%E5%88%A9%E7%94%A8Hexo-Github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2018/08/23/利用Hexo-Github搭建个人博客/</id>
    <published>2018-08-23T12:38:56.000Z</published>
    <updated>2018-08-23T14:31:41.652Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、初始化Node-js"><a href="#一、初始化Node-js" class="headerlink" title="一、初始化Node.js"></a>一、初始化Node.js</h3><p>直接去<a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node.js官网</a>下载对应的安装包，直接在电脑上安装即可。</p><h3 id="二、安装Hexo"><a href="#二、安装Hexo" class="headerlink" title="二、安装Hexo"></a>二、安装Hexo</h3><p>使用npm命令来安装Hexo</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo</span><br></pre></td></tr></table></figure><p>然后在桌面上创建一个文件夹，如Blog，cd进入该文件夹执行以下命令，即可在目标文件夹内建立网站所需的所有文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><p>然后安装依赖包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><p>在博客的对应文件夹中执行以下命令，然后在浏览器输入 <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a> 就可以查看，此时这个博客是本地的，下面我们在将其部署到github上。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure><h3 id="三、部署本地博客到Github上"><a href="#三、部署本地博客到Github上" class="headerlink" title="三、部署本地博客到Github上"></a>三、部署本地博客到Github上</h3><h4 id="1-创建一个仓库，名称必须是-用户名-github-io。"><a href="#1-创建一个仓库，名称必须是-用户名-github-io。" class="headerlink" title="1.创建一个仓库，名称必须是 用户名.github.io。"></a>1.创建一个仓库，名称必须是 用户名.github.io。</h4><p>比如：我的用户名是yywolf,仓库名就是yywolf.github.io</p><h4 id="2-同步到github上"><a href="#2-同步到github上" class="headerlink" title="2.同步到github上"></a>2.同步到github上</h4><p>在博客的本地文件夹中，编辑_config.yml,最底部的deploy</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@github.com:yywolf/yywolf.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>3.输入以下命令，然后在浏览器中输入yywolf.github.io就可以访问了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><h3 id="四、发布博客"><a href="#四、发布博客" class="headerlink" title="四、发布博客"></a>四、发布博客</h3><p>执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new post &apos;文章标题&apos;</span><br></pre></td></tr></table></figure></p><p>然后在本地博客目录下的source-&gt;_posts路径下可找到新建的文章，然后用MacDown编译器编辑即可。</p><p>编译完成之后，执行命令，即可发布到github上。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><hr><h3 id="更换博客主题"><a href="#更换博客主题" class="headerlink" title="更换博客主题"></a>更换博客主题</h3><ol><li>在本地博客目录中删除默认的主题文件夹themes。</li><li>git clone 主题github地址，成功后会出现新的themes文件夹，里面就是新的主题。</li><li>修改当前目录下的_config.yml配置文件，找到theme,修改为我们下载的主题文件夹名称。</li><li>调试,在 <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> 中即可看到效果</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server --debug</span><br></pre></td></tr></table></figure><ol start="5"><li>确认无误后即可输入命令发布到github上</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一、初始化Node-js&quot;&gt;&lt;a href=&quot;#一、初始化Node-js&quot; class=&quot;headerlink&quot; title=&quot;一、初始化Node.js&quot;&gt;&lt;/a&gt;一、初始化Node.js&lt;/h3&gt;&lt;p&gt;直接去&lt;a href=&quot;https://nodejs.org
      
    
    </summary>
    
    
      <category term="Tools" scheme="http://yoursite.com/tags/Tools/"/>
    
  </entry>
  
</feed>
